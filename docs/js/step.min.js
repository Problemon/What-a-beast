import{DATA}from"./data.min.js";import{showEndGame}from"./end.min.js";import{backToElections}from"./elections.min.js";import{addClassHidden,removeClassHidden}from"./util.min.js";import{hideOptions}from"./options.min.js";import{playSoundBubble}from"./sound.min.js";const buttonNext=document.querySelector(".options__button--next"),buttonBack=document.querySelector(".options__button--back");let indexStep=0;const renderStepAnswer=(e,t,s,n)=>`\n  <label class="step__item">\n    <input class="step__radio visually-hidden" type="radio" value="${t+1}" name="${s[0]}-${s[1]}">\n    <picture>\n      <source srcset="img/items/${e}.webp 1x, img/items/${e}@2x.webp 2x">\n      <img class="step__image ${n?"step__image--rounded":""}" src="img/items/${e}.png" srcset="img/items/${e}@2x.png 2x" width="300" height="300" alt="" draggable="false">\n    </picture>\n    <div class="step__check-mark"></div>\n  </label>\n`,renderStepAnswers=(e,t)=>{const{images:s,isRounded:n}=e;return`\n    <fieldset class="step__list">\n      ${s.map(((e,s)=>renderStepAnswer(e,s,t,n))).join("\n")}\n    </fieldset>\n  `},renderStep=(e,t)=>{const{title:s}=e;return`\n    <li class="level__step step step--hidden container" data-class="step">\n      <header class="step__header">\n        <h2 class="step__title title title--step">${s}</h2>\n      </header>\n        ${renderStepAnswers(e,t)}\n    </li>\n  `},renderStepsOfLevel=e=>DATA.STEPS[e].map(((t,s)=>renderStep(t,[e,s]))),steps={level:null,rightAnswers:null,givenRightAnswers:null,getCurrentStep(){return this.steps=this.level.querySelectorAll(".step"),this.steps[indexStep]},getDataOfAnswer(e){return{image:e.closest(".step__item").querySelector(".step__image").src,title:this.currentStep.querySelector(".step__title").textContent}},getCheckedAnswer(){return this.stepList.querySelector("input:checked")},checkAnswer(){this.givenAnswerOfStep=this.getCheckedAnswer();if(this.rightAnswers[indexStep]===Number(this.givenAnswerOfStep.value)){const e=this.getDataOfAnswer(this.givenAnswerOfStep);this.givenRightAnswers.push(e)}},onStepListChange(){buttonNext.classList.remove("button--hidden"),playSoundBubble()},clearStepListChange(){this.stepList.removeEventListener("change",this.onStepListChange)},hideCurrentStep(){const e=this.getCheckedAnswer();e&&(e.checked=!1),buttonNext.classList.add("button--hidden"),this.clearStepListChange(),addClassHidden(this.currentStep)},showCurrentStep(){this.currentStep=this.getCurrentStep(),this.stepList=this.currentStep.querySelector(".step__list"),removeClassHidden(this.currentStep),this.stepList.addEventListener("change",this.onStepListChange)}},onButtonNextClick=()=>{steps.checkAnswer(),indexStep===steps.steps.length-1?(hideOptions(),steps.hideCurrentStep(),showEndGame(steps.givenRightAnswers),indexStep=0):(steps.hideCurrentStep(),indexStep+=1,steps.showCurrentStep())},onButtonBackClick=()=>{0===indexStep?backToElections(steps.level):(steps.hideCurrentStep(),indexStep-=1,steps.showCurrentStep())};buttonBack.addEventListener("click",(()=>{0===indexStep?backToElections(steps.level):(steps.hideCurrentStep(),indexStep-=1,steps.showCurrentStep())})),buttonNext.addEventListener("click",(()=>(steps.checkAnswer(),void(indexStep===steps.steps.length-1?(hideOptions(),steps.hideCurrentStep(),showEndGame(steps.givenRightAnswers),indexStep=0):(steps.hideCurrentStep(),indexStep+=1,steps.showCurrentStep())))));export{steps,renderStepsOfLevel};
//# sourceMappingURL=step.min.js.map
